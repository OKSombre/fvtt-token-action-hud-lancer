const e={ID:"token-action-hud-lancer"},t={ID:"token-action-hud-core"},s="1.5",n={weapon:"tokenActionHud.lancer.weapon"},o={attacks:{id:"attacks",name:"tokenActionHud.lancer.attacks",type:"system"},bonds:{id:"bonds",name:"tokenActionHud.lancer.bonds",type:"system"},combat:{id:"combat",name:"tokenActionHud.lancer.combat",type:"system"},coreBonuses:{id:"core-bonuses",name:"tokenActionHud.lancer.coreBonuses",type:"system"},corePower:{id:"core-power",name:"tokenActionHud.lancer.corePower",type:"system"},deployables:{id:"deployables",name:"tokenActionHud.lancer.deployables",type:"system"},grit:{id:"grit",name:"tokenActionHud.lancer.grit",type:"system"},hase:{id:"hase",name:"tokenActionHud.lancer.hase",type:"system"},mechWeapons:{id:"mech-weapons",name:"tokenActionHud.lancer.mechWeapons",type:"system"},pilotGear:{id:"pilot-gear",name:"tokenActionHud.lancer.pilotGear",type:"system"},pilotWeapons:{id:"pilot-weapons",name:"tokenActionHud.lancer.pilotWeapons",type:"system"},repair:{id:"repair",name:"tokenActionHud.lancer.repair",type:"system"},skillTriggers:{id:"skill-triggers",name:"tokenActionHud.lancer.skillTiggers",type:"system"},statuses:{id:"statuses",name:"tokenActionHud.lancer.status",type:"system"},systems:{id:"systems",name:"tokenActionHud.lancer.systems",type:"system"},talents:{id:"talents",name:"tokenActionHud.lancer.talents",type:"system"},techs:{id:"techs",name:"tokenActionHud.lancer.techs",type:"system"},traits:{id:"traits",name:"tokenActionHud.lancer.traits",type:"system"},weaponMods:{id:"weapon-mods",name:"tokenActionHud.lancer.weapon-mods",type:"system"}},i={CORE_BONUS:"core_bonus",DEPLOYABLE:"deployable",FRAME:"frame",MECH:"mech",LICENSE:"license",NPC:"npc",NPC_CLASS:"npc_class",NPC_TEMPLATE:"npc_template",NPC_FEATURE:"npc_feature",WEAPON_MOD:"weapon_mod",MECH_SYSTEM:"mech_system",MECH_WEAPON:"mech_weapon",ORGANIZATION:"organization",PILOT_ARMOR:"pilot_armor",PILOT_GEAR:"pilot_gear",PILOT_WEAPON:"pilot_weapon",PILOT:"pilot",RESERVE:"reserve",SKILL:"skill",STATUS:"status",TALENT:"talent",BOND:"bond"},a={system:{groupId:"system-actions"}},l={npc_feature:{groupId:"mech-weapons"},mech_wepon:{groupId:"mech-weapons"},pilot_weapon:{groupId:"pilot-weapons"}};let c=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{c=class ActionHandler extends e.api.ActionHandler{actors=null;tokens=null;actorType=null;items=null;showDestroyedItems=null;showItemsWithoutActivations=null;showItemsWithoutUses=null;showNpcFeaturesWithoutActivations=null;showUnchargedNpcFeatures=null;showUnequippedItems=null;showUnloadedWeapons=null;showUsedCorePower=null;activationgroupIds=null;systemGroupIds=null;npcFeatureIds=null;featureActions=null;inventoryActions=null;spellActions=null;async buildSystemActions(t){if(this.actors=this.actor?[this.actor]:this.#e(),this.tokens=this.token?[this.token]:this.#t(),this.actorType=this.actor?.type,this.actor){let t=this.actor.items;t=e.api.Utils.sortItemsByName(t),this.items=t}switch(this.activationgroupIds=["quick-actions","full-actions","reactions","protocols","free-actions","quick-tech","full-tech"],this.systemGroupIds=["actions","deployables","techs"],this.npcFeatureIds=["techs","systems","weapons","traits"],this.actorType){case i.MECH:this.#s();break;case i.PILOT:this.#n();break;case i.NPC:this.#o();break;case i.DEPLOYABLE:this.#i()}this.actor||this.#a()}#i(){}#s(){this.#l()}#a(){}#o(){this.#l()}#n(){}#c(){if(0===this.tokens?.length)return;const t="status",s=CONFIG.statusEffects.filter((e=>""!==e.id));if(0===s.length)return;const o=s.map((s=>{const o=s.id,i=e.api.Utils.i18n(s.label)??s.name,a=`${`${e.api.Utils.i18n(n[t])}: `??""}${i}`,l=[t,o].join(this.delimiter),c=this.actors.every((e=>game.version.startsWith("11")?e.effects.some((e=>e.statuses.some((e=>e===o))&&!e?.disabled)):e.effects.some((e=>e.flags?.core?.statusId===o&&!e?.disabled))))?" active":"",r=`toggle${c}`,d=e.api.Utils.getImage(s);return{id:o,name:i,encodedValue:l,img:d,cssClass:r,listName:a}}));this.addActions(o,{id:"statuses",type:"system"})}#l(){if(0===this.items.size)return;const t="weapon",s=new Map;for(const[e,t]of this.items){const n=t.type;if(this.#r(t)&&t.is_weapon()){const o=s.get(n)??new Map;o.set(e,t),s.set(n,o)}}for(const[o,i]of s){const s=l[o]?.groupId;if(!s)continue;const a={id:s,type:"system"},c=[...i].map((([s,o])=>{const i=s,a=o.name,l=e.api.Utils.i18n(n[t]),c=`${l?`${l}: `:""}${a}`,r=[t,i].join(this.delimiter);return{id:i,name:a,listName:c,encodedValue:r}}));this.addActions(c,a)}}#e(){const t=["deployable","mech","npc","pilot"],s=e.api.Utils.getControlledTokens()?.filter((e=>e.actor)).map((e=>e.actor));return s.every((e=>t.includes(e.type)))?s:[]}#t(){const t=["deployable","mech","npc","pilot"],s=e.api.Utils.getControlledTokens(),n=s?.filter((e=>e.actor)).map((e=>e.actor));return n.every((e=>t.includes(e.type)))?s:[]}#r(e){switch(e.type){case i.NPC_FEATURE:if(!this.showUnchargedNpcFeatures&&e.isRecharge()&&!e.system.charged)return!1;case i.MECH_SYSTEM:case i.MECH_WEAPON:if(!this.showUnloadedWeapons&&e.isLoading()&&!e.system.loaded)return!1;if(!this.showItemsWithoutUses&&e.isLimited()&&!e.system.uses.value)return!1;if(!this.showDestroyedItems||e.system.destroyed)return!1;default:if(!this.showUnequippedItems&&!e.system.equipped)return!1}return!0}}}));const r=await import("../../token-action-hud-core/scripts/token-action-hud-core.min.js"),d=r.ActionHandler,p=r.ActionListExtender,u=r.CategoryManager,m=r.PreRollHandler,y=r.RollHandler,h=r.SystemManager,A=r.Utils,g=r.Logger;let k=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{k=class RollHandler extends e.api.RollHandler{async handleActionClick(e,t){const[s,n]=t.split(this.delimiter);if(["weapon"].includes(s)&&this.isRenderItem())return this.doRenderItem(this.actor,n);const o=["pilot","npc","mech","deployable"];if(this.actor)return void await this.#d(e,this.actor,this.token,s,n);const i=canvas.tokens.controlled.filter((e=>o.includes(e.actor?.type)));for(const t of i){const o=t.actor;await this.#d(e,o,t,s,n)}}async handleActionHover(e,t){}async handleGroupClick(e,t){}async#d(e,t,s,n,o){if("weapon"===n)this.#p(e,t,o)}#u(e,t,s){t.items.get(s).toChat(e)}async#m(e,t){if("endTurn"===t)game.combat?.current?.tokenId===e.id&&await(game.combat?.nextTurn())}#p(e,t,s){t.items.get(s).beginWeaponAttackFlow()}}}));let I=null;function register(e){}Hooks.once("tokenActionHudCoreApiReady",(async e=>{const t=o;Object.values(t).forEach((t=>{t.name=e.api.Utils.i18n(t.name),t.listName=`Group: ${e.api.Utils.i18n(t.listName??t.name)}`}));const s=Object.values(t);I={layout:[{nestId:"pilot",id:"pilot",name:e.api.Utils.i18n("tokenActionHud.lancer.pilot"),groups:[{...t.skillTriggers,nestId:"pilot_skill-triggers"},{...t.grit,nestId:"pilot_grit"},{...t.talents,nestId:"pilot_talents"},{...t.pilotGear,nestId:"pilot_pilot-gear"},{...t.pilotWeapons,nestId:"pilot_pilot-weapons"},{...t.bonds,nestId:"pilot_bonds"}]},{nestId:"mech",id:"mech",name:e.api.Utils.i18n("tokenActionHud.lancer.mech"),groups:[{...t.hase,nestId:"mech_hase"},{...t.coreBonuses,nestId:"mech_core-bonuses"},{...t.corePower,nestId:"mech_core-power"},{...t.traits,nestId:"mech_traits"}]},{nestId:"weapon",id:"weapon",name:e.api.Utils.i18n("tokenActionHud.lancer.weapon"),groups:[{...t.integratedMounts,nestId:"weapon_integrated-mounts"},{...t.mount1,nestId:"weapon_mount-1"},{...t.mount2,nestId:"weapon_mount-2"},{...t.mount3,nestId:"weapon_mount-3"},{...t.attacks,nestId:"weapon_attacks"}]},{nestId:"system",id:"system",name:e.api.Utils.i18n("tokenActionHud.lancer.system"),groups:[{...t.techs,nestId:"system_techs"},{...t.systems,nestId:"system_systems"},{...t.deployables,nestId:"system_deployables"}]},{nestId:"utility",id:"utility",name:e.api.Utils.i18n("tokenActionHud.lancer.utility"),groups:[{...t.combat,nestId:"utility_combat"},{...t.repair,nestId:"utility_repair"}]},{nestId:"status",id:"status",name:e.api.Utils.i18n("tokenActionHud.lancer.status"),groups:[{...t.statuses,nestId:"status_statuses"}]}],groups:s}}));let w=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{w=class SystemManager extends t.api.SystemManager{getActionHandler(){return new c}getAvailableRollHandlers(){return{core:"Core LANCER"}}getRollHandler(e){let t;return t=new k,t}async registerDefaults(){return I}registerSettings(e){}registerStyles(){return{template:{class:"tah-style-lancer-style",file:"tah-lancer-style",moduleId:e.ID,name:"LANCER Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const t=game.modules.get(e.ID);t.api={requiredCoreModuleVersion:"1.5",SystemManager:w},Hooks.call("tokenActionHudSystemReady",t)}));export{n as ACTION_TYPE,c as ActionHandler,t as CORE_MODULE,d as CoreActionHandler,p as CoreActionListExtender,u as CoreCategoryManager,m as CorePreRollHandler,y as CoreRollHandler,h as CoreSystemManager,A as CoreUtils,I as DEFAULTS,i as ENTRY_TYPE,o as GROUP,g as Logger,e as MODULE,a as NPC_FEATURE_TYPE,s as REQUIRED_CORE_MODULE_VERSION,k as RollHandler,w as SystemManager,l as WEAPON_TYPE,register};
