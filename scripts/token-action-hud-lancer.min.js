const t={ID:"token-action-hud-lancer"},e={ID:"token-action-hud-core"},s="1.5",i={activation:"tokenActionHud.lancer.activation",bond:"tokenActionHud.lancer.bond","free-action":"tokenActionHud.lancer.freeAction","full-action":"tokenActionHud.lancer.fullAction","full-tech":"tokenActionHud.lancer.fullTech",invade:"tokenActionHud.lancer.invade",other:"tokenActionHud.lancer.other","quick-action":"tokenActionHud.lancer.quickAction","quick-tech":"tokenActionHud.lancer.quickTech",protocol:"tokenActionHud.lancer.protocol",reaction:"tokenActionHud.lancer.reaction",system:"tokenActionHud.lancer.system",talent:"tokenActionHud.lancer.talent",tech:"tokenActionHud.lancer.tech",weapon:"tokenActionHud.lancer.weapon"},n={None:{groupId:"other-actions",actionType:"other"},Passive:{groupId:"other-actions",actionType:"other"},Quick:{groupId:"quick-actions",actionType:"quick-action"},"Quick Tech":{groupId:"quick-techs",actionType:"quick-tech"},Invade:{groupId:"invades",actionType:"invade"},Full:{groupId:"full-actions",actionType:"full-action"},"Full Tech":{groupId:"full-techs",actionType:"full-tech"},Other:{groupId:"other-actions",actionType:"other"},Reaction:{groupId:"reactions",actionType:"reaction"},Protocol:{groupId:"protocols",actionType:"protocol"},Free:{groupId:"free-actions",actionType:"free-action"}},o={attacks:{id:"attacks",name:"tokenActionHud.lancer.attacks",type:"system"},basicAttack:{id:"basic-attack",name:"tokenActionHud.lancer.basicAttack",type:"system"},basicTech:{id:"basic-tech",name:"tokenActionHud.lancer.basicTech",type:"system"},bonds:{id:"bonds",name:"tokenActionHud.lancer.bonds",type:"system"},combat:{id:"combat",name:"tokenActionHud.lancer.combat",type:"system"},coreBonuses:{id:"core-bonuses",name:"tokenActionHud.lancer.coreBonuses",type:"system"},corePower:{id:"core-power",name:"tokenActionHud.lancer.corePower",type:"system"},deployables:{id:"deployables",name:"tokenActionHud.lancer.deployables",type:"system"},freeActions:{id:"free-actions",name:"tokenActionHud.lancer.freeActions",type:"system"},fullActions:{id:"full-actions",name:"tokenActionHud.lancer.fullActions",type:"system"},fullTechs:{id:"full-techs",name:"tokenActionHud.lancer.fullTechs",type:"system"},grit:{id:"grit",name:"tokenActionHud.lancer.grit",type:"system"},hase:{id:"hase",name:"tokenActionHud.lancer.hase",type:"system"},invades:{id:"invades",name:"tokenActionHud.lancer.invades",type:"system"},mechWeapons:{id:"mech-weapons",name:"tokenActionHud.lancer.mechWeapons",type:"system"},other:{id:"other",name:"tokenActionHud.lancer.other",type:"system"},pilotGear:{id:"pilot-gear",name:"tokenActionHud.lancer.pilotGear",type:"system"},pilotWeapons:{id:"pilot-weapons",name:"tokenActionHud.lancer.pilotWeapons",type:"system"},protocols:{id:"protocols",name:"tokenActionHud.lancer.protocols",type:"system"},quickActions:{id:"quick-actions",name:"tokenActionHud.lancer.quickActions",type:"system"},quickTechs:{id:"quick-techs",name:"tokenActionHud.lancer.quickTechs",type:"system"},reactions:{id:"reactions",name:"tokenActionHud.lancer.reactions",type:"system"},refresh:{id:"refresh",name:"tokenActionHud.lancer.refresh",type:"system"},repair:{id:"repair",name:"tokenActionHud.lancer.repair",type:"system"},skillTriggers:{id:"skill-triggers",name:"tokenActionHud.lancer.skillTriggers",type:"system"},stats:{id:"stats",name:"tokenActionHud.lancer.stats",type:"system"},statuses:{id:"statuses",name:"tokenActionHud.lancer.statuses",type:"system"},systems:{id:"systems",name:"tokenActionHud.lancer.systems",type:"system"},talents:{id:"talents",name:"tokenActionHud.lancer.talents",type:"system"},techs:{id:"techs",name:"tokenActionHud.lancer.techs",type:"system"},traits:{id:"traits",name:"tokenActionHud.lancer.traits",type:"system"},weaponMods:{id:"weapon-mods",name:"tokenActionHud.lancer.weaponMods",type:"system"}},a={CORE_BONUS:"core_bonus",DEPLOYABLE:"deployable",FRAME:"frame",MECH:"mech",LICENSE:"license",NPC:"npc",NPC_CLASS:"npc_class",NPC_TEMPLATE:"npc_template",NPC_FEATURE:"npc_feature",WEAPON_MOD:"weapon_mod",MECH_SYSTEM:"mech_system",MECH_WEAPON:"mech_weapon",ORGANIZATION:"organization",PILOT_ARMOR:"pilot_armor",PILOT_GEAR:"pilot_gear",PILOT_WEAPON:"pilot_weapon",PILOT:"pilot",RESERVE:"reserve",SKILL:"skill",STATUS:"status",TALENT:"talent",BOND:"bond"},c=">",l={bond:{groupId:"bonds",actionType:"bond"},mech_system:{groupId:"mech-systems",actionType:"system"},mech_weapon:{groupId:"mech-weapons",actionType:"weapon"},pilot_weapon:{groupId:"pilot-weapons",actionType:"weapon"},weapon_mod:{groupId:"weapon-mods",actionType:"system"}},r={Reaction:{groupId:"reactions",actionType:"system"},System:{groupId:"systems",actionType:"system"},Tech:{groupId:"techs",actionType:"tech"},Trait:{groupId:"traits",actionType:"system"},Weapon:{groupId:"mech-weapons",actionType:"weapon"}},d={hull:"tokenActionHud.lancer.hul",agi:"tokenActionHud.lancer.agi",sys:"tokenActionHud.lancer.sys",eng:"tokenActionHud.lancer.eng",grit:"tokenActionHud.lancer.grit",tier:"tokenActionHud.lancer.tier"};let u=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{u=class ActionHandler extends t.api.ActionHandler{actors=null;tokens=null;actorType=null;pilot=null;items=null;showDestroyedItems=null;showItemsWithoutActivations=null;showItemsWithoutUses=null;showNpcFeaturesWithoutActivations=null;showUnchargedNpcFeatures=null;showUnequippedItems=null;showUnloadedWeapons=null;showUsedCorePower=null;groupIds=null;activationgroupIds=null;systemGroupIds=null;statGroupIds=null;npcFeatureIds=null;featureActions=null;async buildSystemActions(e){if(this.actors=this.actor?[this.actor]:this.#t(),this.tokens=this.token?[this.token]:this.#e(),this.actorType=this.actor?.type,this.actor){let e=this.actor.items;this.actor.system.pilot&&(this.pilot=this.actor.system.pilot.value),e=t.api.Utils.sortItemsByName(e),this.items=e}switch(this.groupIds=e,this.activationgroupIds=["quick-actions","full-actions","reactions","protocols","free-actions","quick-tech","full-tech"],this.systemGroupIds=["actions","deployables","techs"],this.npcFeatureIds=["techs","systems","weapons","traits"],this.actorType){case a.MECH:this.#s(),this.#i();break;case a.PILOT:this.#i();break;case a.NPC:this.#n()}this.actor||this.#o()}#s(){if(this.#a(),this.#c(),this.showUnequippedItems){this.#l(this.items);const e=t.api.Utils.sortItemsByName(this.pilot.items);this.#l(e)}else this.#r(),this.#d()}#o(){this.#a(),this.#c()}#n(){this.#u(),this.#a(),this.#c()}#i(){this.pilot||(this.showUnequippedItems?this.#l(this.items):this.#d(),this.#a(),this.#c())}#h(e,s=""){if(0===e.size)return;const o=new Map,a=["None","Passive","Other"];for(const[t,s]of e){const e=s.system.actions;for(const s of e.keys()){const i=e[s].activation;if(!this.showItemsWithoutActivations&&a.includes(i))continue;o.has(i)||o.set(i,new Map);const n=[t,`system.actions.${s}`].join(c);o.get(i).set(n,e[s])}}for(const[e,a]of o){const o=n[e]?.groupId,c=l[s]?.actionType??n[e]?.actionType;if(!o||!c)continue;const r={id:o,type:"system"},d=[...a].map((([e,s])=>{const n=s.name,o=t.api.Utils.i18n(i[c]),a=`${o?`${o}: `:""}${n}`,l=["activation",e].join(this.delimiter);return{id:e,name:n,listName:a,encodedValue:l}})).sort(this.#p);this.addActions(d,r)}}#m(e){if(0===e.size)return;const s=l[a.BOND]?.actionType,n=l[a.BOND]?.groupId;if(!n||!s)return;const o={id:n,type:"system"};let r=[];for(const[n,o]of e){const e=o.system.powers;for(const a of e.keys()){const l=e[a];if(!l.unlocked)continue;if(!this.showItemsWithoutUses&&l.uses&&0===l.uses.value)continue;const d=[n,a].join(c),u=o.name,h=t.api.Utils.i18n(i[s]),p=`${h?`${h}: `:""}${u}`,m=[s,d].join(this.delimiter);r.push({id:d,name:u,listName:p,encodedValue:m})}}r.sort(this.#p),this.addActions(r,o)}#l(t=null){const e=t??this.items;if(0===e.size)return;const s=new Map;for(const[t,i]of e){const e=i.system.type??i.type;if(this.#y(i)){const n=s.get(e)??new Map;n.set(t,i),s.set(e,n)}}for(const[t,e]of s){switch(t){case a.BOND:this.#m(e);break;case a.MECH_WEAPON:case a.PILOT_WEAPON:case a.WEAPON_MOD:this.#A(e,t);break;case a.TALENT:this.#k(e)}this.#h(e,t)}}#r(){if(!this.actor?.system?.loadout)return;const t=new Map,e=new Map,s=this.actor.system.loadout.systems,i=new Map(s.map((t=>[t.id,t.value]))),n=this.actor.system.loadout.weapon_mounts;for(const s of n)0!==s.slots.length&&s.slots.map((s=>{s.weapon&&this.#y(s.weapon.value)&&t.set(s.weapon.id,s.weapon.value),s.mod&&this.#y(s.mod.value)&&e.set(s.mod.id,s.mod.value)}));this.#A(t,a.MECH_WEAPON),this.#h(t,a.MECH_WEAPON),this.#A(e,a.WEAPON_MOD),this.#h(e,a.WEAPON_MOD),this.#h(i,a.MECH_SYSTEM)}#u(){if(0===this.items.size)return;const e=new Map;for(const[t,s]of this.items){const i=s.system.type;if(this.#y(s)){const n=e.get(i)??new Map;n.set(t,s),e.set(i,n)}}for(const[s,n]of e){const e=r[s]?.groupId;if(!e)continue;const o={id:e,type:"system"},a=[...n].map((([e,n])=>{const o=n.name,a=r[s]?.actionType,c=t.api.Utils.i18n(i[a]),l=`${c?`${c}: `:""}${o}`,d=[a,e].join(this.delimiter);return{id:e,name:o,listName:l,encodedValue:d}}));this.addActions(a,o)}}#d(){const e=this.pilot??this.actor;if(0===e.items.size)return;const s=new Map,i=t.api.Utils.sortItemsByName(e.items);for(const[t,e]of i)e.system.equipped&&s.set(t,e);this.#l(s)}#a(){const e="stat",s=Object.entries({hull:"system.hull",agi:"system.agi",sys:"system.sys",eng:"system.eng",grit:"system.grit",tier:"system.tier"}).map((([s,n])=>{if(!this.actors.every((t=>void 0!==t.system[s])))return;const o=n,a=t.api.Utils.i18n(d[s]);return{id:o,name:a,listName:`${`${t.api.Utils.i18n(i[e])}: `??""}${a}`,encodedValue:[e,n].join(this.delimiter)}})).filter((t=>void 0!==t));this.addActions(s,{id:"stats",type:"system"})}#c(){if(0===this.tokens?.length)return;const e="status",s=CONFIG.statusEffects.filter((t=>""!==t.id));if(0===s.length)return;const n=s.map((s=>{const n=s.id,o=t.api.Utils.i18n(s.label)??s.name,a=`${`${t.api.Utils.i18n(i[e])}: `??""}${o}`,c=[e,n].join(this.delimiter),l=this.actors.every((t=>game.version.startsWith("11")?t.effects.some((t=>t.statuses.some((t=>t===n))&&!t?.disabled)):t.effects.some((t=>t.flags?.core?.statusId===n&&!t?.disabled))))?" active":"",r=`toggle${l}`,d=t.api.Utils.getImage(s);return{id:n,name:o,encodedValue:c,img:d,cssClass:r,listName:a}}));this.addActions(n,{id:"statuses",type:"system"})}#k(e){if(0===e.size)return;const s=l[a.TALENT]?.actionType,o=new Map,r=["None","Passive","Other"];for(const[t,s]of e){const e=s.system.curr_rank;for(const i=0;i<e;i++){s.system.ranks[i].actions.map(((e,s)=>{const n=e.activation;if(!this.showItemsWithoutActivations&&r.includes(n))return;o.has(n)||o.set(n,new Map);const a=[t,`system.ranks.${i}.actions.${s}`].join(c);o.get(n).set(a,e)}))}}for(const[e,a]of o){const o=n[e]?.groupId;if(!o)continue;const c={id:o,type:"system"},l=[...a].map((([e,n])=>{const o=n.name,a=t.api.Utils.i18n(i[s]),c=`${a?`${a}: `:""}${o}`,l=[actionType,e].join(this.delimiter);return{id:e,name:o,listName:c,encodedValue:l}})).sort(this.#p);this.addActions(l,c)}}#A(e,s){if(0===e.size)return;const n=l[s]?.actionType,o=l[s]?.groupId;if(!o||!n)return;const a={id:o,type:"system"},c=[...t.api.Utils.sortItemsByName(e)].map((([e,s])=>{const o=e,a=s.name,c=t.api.Utils.i18n(i[n]),l=`${c?`${c}: `:""}${a}`,r=[n,o].join(this.delimiter);return{id:o,name:a,listName:l,encodedValue:r}}));this.addActions(c,a)}#t(){const e=["deployable","mech","npc","pilot"],s=t.api.Utils.getControlledTokens()?.filter((t=>t.actor)).map((t=>t.actor));return s.every((t=>e.includes(t.type)))?s:[]}#e(){const e=["deployable","mech","npc","pilot"],s=t.api.Utils.getControlledTokens(),i=s?.filter((t=>t.actor)).map((t=>t.actor));return i.every((t=>e.includes(t.type)))?s:[]}#y(t){switch(t.type){case a.NPC_FEATURE:if(!this.showUnchargedNpcFeatures&&t.isRecharge()&&!t.system.charged)return!1;case a.MECH_SYSTEM:case a.MECH_WEAPON:case a.WEAPON_MOD:if(!this.showDestroyedItems&&t.system.destroyed)return!1;case a.PILOT_WEAPON:if(!this.showUnloadedWeapons&&t.isLoading()&&!t.system.loaded)return!1;if(!this.showItemsWithoutUses&&t.isLimited()&&!t.system.uses.value)return!1;break;default:return!1}return!0}#p(t,e){return t.name===e.name?0:t.name<e.name?-1:1}}}));const h=await import("../../token-action-hud-core/dist/token-action-hud-core.min.js"),p=h.ActionHandler,m=h.ActionListExtender,y=h.CategoryManager,A=h.PreRollHandler,k=h.RollHandler,b=h.SystemManager,g=h.Utils,f=h.Logger;let I=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=o;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const s=Object.values(e);I={layout:[{nestId:"attacks",id:"attacks",name:t.api.Utils.i18n("tokenActionHud.lancer.attacks"),groups:[{...e.mechWeapons,nestId:"attacks_mech-weapons"},{...e.weaponMods,nestId:"attacks_weapon-mods"},{...e.pilotWeapons,nestId:"attacks_pilot-weapons"},{...e.basicAttack,nestId:"attacks_basic-attack"}]},{nestId:"tech",id:"tech",name:t.api.Utils.i18n("tokenActionHud.lancer.tech"),groups:[{...e.quickTechs,nestId:"tech_quick-techs"},{...e.fullTechs,nestId:"tech_full-techs"},{...e.invades,nestId:"tech_invades"},{...e.basicTech,nestId:"tech_basic-tech"}]},{nestId:"activations",id:"activations",name:t.api.Utils.i18n("tokenActionHud.lancer.activations"),groups:[{...e.corePower,nestId:"activations_core-power"},{...e.protocols,nestId:"activations_protocols"},{...e.quickActions,nestId:"activations_quick-actions"},{...e.fullActions,nestId:"activations_full-actions"},{...e.freeActions,nestId:"activations_free-actions"},{...e.reactions,nestId:"activations_reactions"},{...e.traits,nestId:"activations_traits"},{...e.otherActions,nestId:"activations_other-actions"}]},{nestId:"skills",id:"skills",name:t.api.Utils.i18n("tokenActionHud.lancer.skills"),groups:[{...e.stats,nestId:"skills_stats"},{...e.skillTriggers,nestId:"skills_skill-triggers"},{...e.bonds,nestId:"skills_bonds"}]},{nestId:"utility",id:"utility",name:t.api.Utils.i18n("tokenActionHud.lancer.utility"),groups:[{...e.combat,nestId:"utility_combat"},{...e.repair,nestId:"utility_repair"},{...e.refresh,nestId:"utility_refresh"}]},{nestId:"statuses",id:"statuses",name:t.api.Utils.i18n("tokenActionHud.lancer.status"),groups:[{...e.statuses,nestId:"status_statuses"}]}],groups:s}}));let w=null;function register(t){}Hooks.once("tokenActionHudCoreApiReady",(async t=>{w=class RollHandler extends t.api.RollHandler{async handleActionClick(t,e){const[s,i]=e.split(this.delimiter);if(["weapon"].includes(s)&&this.isRenderItem())return this.doRenderItem(this.actor,i);const n=["pilot","npc","mech","deployable"];if(this.actor)return void await this.#b(t,this.actor,this.token,s,i);const o=canvas.tokens.controlled.filter((t=>n.includes(t.actor?.type)));for(const e of o){const n=e.actor;await this.#b(t,n,e,s,i)}}async handleActionHover(t,e){}async handleGroupClick(t,e){}async#b(t,e,s,i,n){switch(i){case"activation":case"talent":this.#g(e,n);break;case"basic-attack":this.#f(e);break;case"basic-tech":this.#I(e);break;case"bond":this.#w(e,n);break;case"combat":this.#H(s,n);break;case"core":this.#T(e,n);break;case"full-repair":this.#v(e);break;case"overcharge":this.#_(e);break;case"overheat":this.#N(e);break;case"skill":this.#E(e,n);break;case"stat":this.#M(e,n);break;case"structure":this.#O(e);break;case"system":this.#S(e,n);break;case"tech":this.#U(e,n);break;case"weapon":this.#C(e,n)}}#g(t,e){const s=e.split(c),i=s[0],n=s[1];t.items.get(i).beginActivationFlow(n)}#f(t){t.beginBasicAttackFlow()}#I(t){t.beginBasicTechFlow()}#w(t,e){const s=e.split(c),i=s[0],n=s[1];t.items.get(i).beginBondPowerFlow(n)}async#H(t,e){if(!game.combat)return;const s=game.combat?.combatants.find((e=>e.token===t));if(s)switch(e){case"activate":await(game.combat?.activateCombatant(s.id));break;case"deactivate":await(game.combat?.deactivateCombatant(s.id))}}#T(t,e){const s=e.split(c),i=s[0],n=s[1];t.items.get(i).beginCoreActiveFlow(n)}#P(t,e,s){e.items.get(s).toChat(t)}#v(t){t.beginFullRepairFlow()}#_(t){t.beginOverchargeFlow()}#N(t){t.beginOverheatFlow()}#M(t,e){t.beginStatFlow(e)}#E(t,e){t.items.get(e).beginSkillFlow()}#O(t){t.beginStructureFlow()}#S(t,e){t.items.get(e).beginSystemFlow()}#U(t,e){t.items.get(e).beginTechAttackFlow()}#C(t,e){t.items.get(e).beginWeaponAttackFlow()}}}));let H=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{H=class SystemManager extends e.api.SystemManager{getActionHandler(){return new u}getAvailableRollHandlers(){return{core:"Core LANCER"}}getRollHandler(t){let e;return e=new w,e}async registerDefaults(){return I}registerSettings(t){}registerStyles(){return{template:{class:"tah-style-lancer-style",file:"tah-lancer-style",moduleId:t.ID,name:"LANCER Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(t.ID);e.api={requiredCoreModuleVersion:"1.5",SystemManager:H},Hooks.call("tokenActionHudSystemReady",e)}));export{i as ACTION_TYPE,n as ACTIVATION_TYPE,u as ActionHandler,e as CORE_MODULE,p as CoreActionHandler,m as CoreActionListExtender,y as CoreCategoryManager,A as CorePreRollHandler,k as CoreRollHandler,b as CoreSystemManager,g as CoreUtils,I as DEFAULTS,a as ENTRY_TYPE,o as GROUP,c as ID_DELIMITER,l as ITEM_TYPE,f as Logger,t as MODULE,r as NPC_FEATURE_TYPE,s as REQUIRED_CORE_MODULE_VERSION,w as RollHandler,d as STAT_TYPE,H as SystemManager,register};
